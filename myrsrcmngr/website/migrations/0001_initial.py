# Generated by Django 4.1.3 on 2022-12-31 04:09

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import website.custom_validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='hosts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_address', models.CharField(max_length=50)),
                ('ipv4', models.CharField(blank=True, max_length=50, null=True)),
                ('mac', models.CharField(blank=True, max_length=50, null=True)),
                ('vendor', models.CharField(blank=True, max_length=100, null=True)),
                ('ipv6', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(blank=True, max_length=50, null=True)),
                ('hostnames', models.CharField(blank=True, max_length=400, null=True)),
                ('os_fingerprint', models.CharField(blank=True, max_length=200, null=True)),
                ('tcpsequence', models.CharField(blank=True, max_length=50, null=True)),
                ('ipsequence', models.CharField(blank=True, max_length=50, null=True)),
                ('uptime', models.CharField(blank=True, max_length=50, null=True)),
                ('lastboot', models.CharField(blank=True, max_length=50, null=True)),
                ('distance', models.IntegerField(blank=True, null=True)),
                ('is_removed', models.BooleanField(blank=True, null=True)),
                ('is_added', models.BooleanField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='reports',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prev_rep', models.IntegerField(blank=True, null=True)),
                ('started_int', models.IntegerField(blank=True, null=True)),
                ('endtime_int', models.IntegerField(blank=True, null=True)),
                ('started_str', models.CharField(blank=True, max_length=200, null=True)),
                ('endtime_str', models.CharField(blank=True, max_length=200, null=True)),
                ('version', models.CharField(blank=True, max_length=40, null=True)),
                ('scan_type', models.CharField(blank=True, max_length=80, null=True)),
                ('num_services', models.IntegerField(blank=True, null=True)),
                ('elapsed', models.IntegerField(blank=True, null=True)),
                ('hosts_up', models.IntegerField(blank=True, null=True)),
                ('hosts_down', models.IntegerField(blank=True, null=True)),
                ('hosts_total', models.IntegerField(blank=True, null=True)),
                ('summary', models.CharField(blank=True, max_length=400, null=True)),
                ('full_cmndline', models.CharField(blank=True, max_length=300, null=True)),
                ('path_to', models.CharField(blank=True, max_length=400, null=True)),
                ('is_consistent', models.BooleanField(blank=True, null=True)),
                ('is_last', models.BooleanField(default=False)),
                ('parse_success', models.BooleanField(default=True)),
                ('standard', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='resourcegroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('subnet', models.CharField(help_text='Only IPv4 addresses are supported. Indicate subnet in CIDR notation (e.g. 198.162.0.1/24) or IPv4 address list (comma separated)', max_length=100, unique=True, validators=[website.custom_validators.validate_ips_or_subnet], verbose_name='Subnet or IP list')),
                ('name', models.CharField(max_length=200, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='Group Name')),
                ('description', models.CharField(blank=True, max_length=600, null=True, verbose_name='Description')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='services',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('port', models.IntegerField()),
                ('state', models.CharField(max_length=50)),
                ('protocol', models.CharField(blank=True, max_length=50, null=True)),
                ('name_conc', models.CharField(blank=True, max_length=200, null=True)),
                ('reason', models.CharField(blank=True, max_length=100, null=True)),
                ('reason_ip', models.CharField(blank=True, max_length=100, null=True)),
                ('reason_ttl', models.CharField(blank=True, max_length=100, null=True)),
                ('service', models.CharField(blank=True, max_length=150, null=True)),
                ('owner', models.CharField(blank=True, max_length=100, null=True)),
                ('banner', models.CharField(blank=True, max_length=400, null=True)),
                ('servicefp', models.CharField(blank=True, max_length=200, null=True)),
                ('tunnel', models.CharField(blank=True, max_length=100, null=True)),
                ('is_removed', models.BooleanField(blank=True, null=True)),
                ('is_added', models.BooleanField(blank=True, null=True)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.hosts')),
                ('reports_belonging_to', models.ManyToManyField(blank=True, to='website.reports')),
            ],
        ),
        migrations.CreateModel(
            name='scans',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='Date of Creation')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Date of Modification')),
                ('last_executed', models.DateTimeField(blank=True, null=True, verbose_name='Last Executed at')),
                ('next_execution_at', models.DateTimeField(null=True, verbose_name='Next Execution at')),
                ('scanName', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='Name')),
                ('status', models.SmallIntegerField(blank=True, null=True, verbose_name='Status')),
                ('task_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Task Name')),
                ('task_status', models.CharField(blank=True, max_length=30, null=True, verbose_name='Task Status')),
                ('task_etc', models.IntegerField(blank=True, null=True)),
                ('task_progress', models.FloatField(blank=True, null=True, verbose_name='Task Progress')),
                ('params', models.CharField(blank=True, max_length=200, null=True, verbose_name='Parameters')),
                ('active', models.BooleanField(blank=True, default=False, null=True, verbose_name='Make Active')),
                ('ScanTemplate', models.CharField(choices=[('-vvv --stats-every 1s --top-ports 100 -T2', '-oX -vvv --stats-every 1s --top-ports 100 -T2'), ('--stats-every 1s --top-ports 100 -T3', '-oX -vvv --stats-every 1s --top-ports 100 -T3'), ('--stats-every 1s --top-ports 100 -T4', '-oX -vvv --stats-every 1s --top-ports 100 -T4'), ('-vvv --stats-every 1s -sV --top-ports 1000', '-vvv --stats-every 1s -sV --top-ports 1000')], help_text='Indicate here the scan template you want to use. Free parameter entry is not supported yet.', max_length=80, verbose_name='Scan Template')),
                ('ScanSchedule', models.CharField(choices=[('hh', 'Every half hour'), ('h', 'Every hour'), ('d', 'Every day'), ('w', 'Every week')], help_text='Indicate here how often would you like the scan to run.', max_length=2, verbose_name='Scan Schedule')),
                ('resourcegroup', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='website.resourcegroups', verbose_name='Group Name')),
                ('scanAuthor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='reports',
            name='resourcegroup',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='website.resourcegroups'),
        ),
        migrations.AddField(
            model_name='reports',
            name='scan',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='website.scans'),
        ),
        migrations.AddField(
            model_name='hosts',
            name='reports_belonging_to',
            field=models.ManyToManyField(blank=True, to='website.reports'),
        ),
        migrations.AddField(
            model_name='hosts',
            name='resourcegroup',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='website.resourcegroups'),
        ),
        migrations.CreateModel(
            name='changes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute', models.CharField(blank=True, max_length=100, null=True)),
                ('cur_val', models.CharField(blank=True, max_length=200, null=True)),
                ('prev_val', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(blank=True, max_length=70, null=True)),
                ('prev_rep', models.IntegerField(blank=True, null=True)),
                ('dismissed', models.BooleanField(default=False)),
                ('cur_report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.reports')),
                ('host', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='website.hosts')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='website.services')),
            ],
        ),
    ]
